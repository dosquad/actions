name: "Unit Test"

on:
  workflow_call:
    inputs:
      binary-name:
        required: false
        description: "Binary name"
        type: string
      make-custom-target:
        required: false
        default: ''
        description: "Custom Makefile target to run"
        type: string
      codecov-flags:
        required: false
        default: 'unittests'
        description: "Codecov Action Flags"
        type: string
      docker-push-tag:
        required: false
        default: ''
        description: "Docker push tag"
        type: string
      runs-on:
        required: false
        default: "ubuntu-latest"
        description: "Runner label for jobs"
        type: string
      static-test:
        required: false
        default: true
        description: "Check that no new files have been created or local files modified"
        type: boolean
      upload-artifacts:
        required: false
        default: ""
        description: "Path to upload as artifacts"
        type: string
      upload-artifacts-name:
        required: false
        default: "artifacts-${{ github.sha }}"
        description: "Artifacts name"
        type: string
    secrets:
      DOCKER_USERNAME:
        required: false
      DOCKER_PASSWORD:
        required: false
      DOCKER_GITHUB_TOKEN:
        required: false
      CODECOV_TOKEN:
        required: false

jobs:
  unit-test:
    name: "Unit Test"
    runs-on: ${{ inputs.runs-on }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Docker Login (Docker Hub)
      uses: docker/login-action@v3
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      if: ${{ (env.DOCKER_USERNAME != '') && (env.DOCKER_PASSWORD != '') }}
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Docker Login (GitHub Container Registry)
      uses: docker/login-action@v3
      env:
        DOCKER_GITHUB_TOKEN: ${{ secrets.DOCKER_GITHUB_TOKEN }}
      if: ${{ env.DOCKER_GITHUB_TOKEN != '' }}
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.DOCKER_GITHUB_TOKEN }}

    - name: Set up Node
      if: ${{ hashFiles('package.json') != '' }}
      uses: actions/setup-node@v4
      with:
        node-version: 16
      id: node

    - name: Set up Go
      if: ${{ hashFiles('go.mod') != '' }}
      uses: actions/setup-go@v5
      with:
        go-version: ^1
        cache: true
      id: go

    - name: Set up go env
      if: ${{ hashFiles('go.mod') != '' }}
      run: |
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Download module dependencies
      if: ${{ hashFiles('go.mod') != '' }}
      run: go mod download

    - name: Run golangci/golangci-lint
      if: ${{ hashFiles('.golangci.yml') != '' }}
      uses: golangci/golangci-lint-action@v6
      with:
        skip-cache: true

    - name: Node Package Manager CI
      if: ${{ hashFiles('package.json') != '' }}
      run: npm ci

    - name: Run Unit Tests Target
      run: make test

    - name: Run CI Target
      run: make ci

    - name: Make Binary Target
      if: ${{ inputs.binary-name }}
      run: make artifacts/build/release/linux/amd64/${{ inputs.binary-name }}

    - name: Run Custom Make Target
      if: ${{ inputs.make-custom-target != '' }}
      run: make ${{ inputs.make-custom-target }}

    - name: Upload coverage to Codecov
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      if: ${{ env.CODECOV_TOKEN != '' }}
      uses: codecov/codecov-action@v4
      with:
        flags: ${{ inputs.codecov-flags }}
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
        verbose: true

    - name: Make Docker Push
      if: ${{ inputs.docker-push-tag != '' }}
      run: make docker-push
      env:
        DOCKER_TAGS: ${{ inputs.docker-push-tag }}

    - name: Store Artifacts
      if: '!cancelled()'
      id: upload-artifacts
      uses: dosquad/actions/.github/actions/upload-artifacts@main
      with:
        name: ${{ inputs.upload-artifacts-name }}
        path: ${{ inputs.upload-artifacts }}

    - name: Check diff
      if: ${{ inputs.static-test }}
      run: '[[ -z $(git status -s) ]] || (printf "Existing modified/untracked files."; exit 1)'
