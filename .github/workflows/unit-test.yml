name: "Unit Test"

on:
  workflow_call:
    inputs:
      binary-name:
        required: false
        description: "Binary name"
        type: string
      stack-test:
        required: false
        default: false
        description: "Run CI Stack Test"
        type: boolean
      docker-push:
        required: false
        default: false
        description: "Enable docker push"
        type: boolean
      codecov-flags:
        required: false
        default: 'unittests'
        description: "Codecov Action Flags"
        type: string
      runs-on:
        required: false
        default: "ubuntu-latest"
        description: "Runner label for jobs"
        type: string
      upload-artifacts:
        required: false
        default: ""
        description: "Path to upload as artifacts"
        type: string
      upload-artifacts-name:
        required: false
        default: "artifacts-${{ github.sha }}"
        description: "Artifacts name"
        type: string
      vulncheck:
        required: false
        default: true
        description: "Enable golang vulnerability check"
        type: boolean
      golangci-args:
        required: false
        default: --timeout=10m
        description: "golangci-lint arguments"
        type: string
      platforms:
        required: false
        default: "linux/amd64"
        description: "Comma separated list of platforms for docker buildx (eg. linux/amd64,linux/arm64)"
        type: string
    secrets:
      CODECOV_TOKEN:
        required: false
      DOCKER_USERNAME:
        required: false
      DOCKER_PASSWORD:
        required: false
      DOCKER_GITHUB_TOKEN:
        required: false
      CWX_GH_TOKEN:
        required: false
      CWX_GHE_TOKEN:
        required: false

jobs:
  unit-test:
    name: "Unit Test"
    runs-on: ${{ inputs.runs-on }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Platforms comma to spaces
      id: platforms
      uses: actions/github-script@v7
      env:
        INPUT_PLATFORMS: "${{ inputs.platforms }}"
      with:
        script: |
          const { INPUT_PLATFORMS } = process.env
          core.setOutput('spaces', INPUT_PLATFORMS.replace(',', ' '))
          core.setOutput('commas', INPUT_PLATFORMS.replace(' ', ','))

    - name: Set up QEMU
      if: ${{ inputs.platforms != 'linux/amd64' }}
      uses: docker/setup-qemu-action@v3
      with:
        platforms: ${{ inputs.platforms }}

    - name: Set up Docker Buildx
      if: ${{ inputs.platforms != 'linux/amd64' }}
      uses: docker/setup-buildx-action@v3
      with:
        platforms: ${{ inputs.platforms }}

    - name: Docker Login (Docker Hub)
      uses: docker/login-action@v3
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      if: ${{ (env.DOCKER_USERNAME != '') && (env.DOCKER_PASSWORD != '') }}
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Docker Login (GitHub Container Registry)
      uses: docker/login-action@v3
      env:
        DOCKER_GITHUB_TOKEN: ${{ secrets.DOCKER_GITHUB_TOKEN }}
      if: ${{ env.DOCKER_GITHUB_TOKEN != '' }}
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.DOCKER_GITHUB_TOKEN }}

    - name: Set up Node
      if: ${{ hashFiles('package.json') != '' }}
      uses: actions/setup-node@v4
      with:
        node-version: 16
      id: node

    - name: Set up Go
      if: ${{ hashFiles('go.mod') != '' }}
      uses: actions/setup-go@v4
      with:
        go-version: ^1
        cache: true
      id: go

    - name: Set up go env
      if: ${{ hashFiles('go.mod') != '' }}
      run: |
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Run golangci/golangci-lint
      if: ${{ hashFiles('.golangci.yml') != '' }}
      uses: golangci/golangci-lint-action@v6
      with:
        skip-cache: true
        args: ${{ inputs.golangci-args }}

    - name: Run govulncheck
      if: ${{ (hashFiles('go.mod') != '') && inputs.vulncheck }}
      continue-on-error: true
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        mkdir -p "artifacts"
        govulncheck ./...
      shell: bash

    - name: Node Package Manager CI
      if: ${{ hashFiles('package.json') != '' }}
      run: npm ci

    - name: Make Docker
      if: ${{ hashFiles('Dockerfile') != '' && hashFiles('Makefile') != '' }}
      run: make docker

    - name: Run Unit Tests Target
      if: ${{ hashFiles('Makefile') != '' }}
      run: make test

    - name: Run CI Target
      if: ${{ hashFiles('Makefile') != '' }}
      run: make ci
      env:
        DISABLE_FOSSA: true

    - name: Run Mage
      if: ${{ hashFiles('magefiles/*') != '' }}
      uses: magefile/mage-action@v3
      with:
        version: latest

    - name: Make Binary Target
      if: ${{ hashFiles('Makefile') != '' && inputs.binary-name }}
      run: make artifacts/build/release/linux/amd64/${{ inputs.binary-name }}

    - name: Mage Binary Target
      if: ${{ hashFiles('magefiles/*') != '' && inputs.binary-name }}
      uses: magefile/mage-action@v3
      with:
        version: latest
        args: build:releaseCommand ${{ inputs.binary-name }}

    - name: Run CI Stack Test
      if: ${{ hashFiles('Makefile') != '' && inputs.stack-test }}
      run: make ci-stack-test
      env:
        DISABLE_FOSSA: true

    - name: Upload coverage to Codecov
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      if: ${{ env.CODECOV_TOKEN != '' }}
      uses: codecov/codecov-action@v4
      with:
        flags: ${{ inputs.codecov-flags }}
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
        verbose: true

    - name: Make Docker Push
      if: ${{ hashFiles('Makefile') != '' && ( ( github.event_name == 'pull_request' && inputs.docker-push ) || ( startsWith(github.ref, 'refs/tags/') && inputs.docker-push ) ) }}
      run: make docker-push

    - name: Store Artifacts
      if: '!cancelled()'
      id: upload-artifacts
      uses: dosquad/actions/.github/actions/upload-artifacts@main
      with:
        name: ${{ inputs.upload-artifacts-name }}
        path: ${{ inputs.upload-artifacts }}
