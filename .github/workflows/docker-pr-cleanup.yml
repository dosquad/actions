name: Container cleanup on closed PR

on:
  workflow_call:
    inputs:
      package-name:
        required: true
        default: ""
        description: "Target Package Name"
        type: string
      owner:
        required: true
        description: "Repository Owner (github.repository_owner)"
        type: string
      repository:
        required: false
        default: ""
        description: "Repository Name, defaults to package-name"
        type: string
      pull-request-merged:
        required: true
        description: "Pull Request Merged Boolean (github.event.pull_request.merged)"
        type: boolean
      pull-request-number:
        required: true
        description: "Pull Request Number (github.event.pull_request.number)"
        type: string

jobs:
  metadata:
    name: "Generate Metadata"
    runs-on: ubuntu-latest
    outputs:
      user-type: ${{steps.userdata.outputs.type}}
      version-url: ${{steps.version-url.outputs.url}}
      version-id: ${{steps.version-id.outputs.version_id}}
    steps:
      - name: Get User Type from API
        id: userdata
        run: |
          curl \
            -X GET \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}" \
            "${{github.api_url}}/users/${{ inputs.owner }}" >> ${HOME}/userdata.json
          echo "type=$(jq -r ".type" ${HOME}/userdata.json)" | tee -a "${GITHUB_OUTPUT}"
      - name: Generate API URL
        id: version-url
        uses: actions/github-script@v7
        env:
          CONST_APIURL: "${{github.api_url}}"
          INPUT_PACKAGE_NAME: "${{ inputs.package-name }}"
          INPUT_OWNER: "${{ inputs.owner }}"
          INPUT_REPO: "${{ inputs.repository }}"
          OUTPUT_TYPE: "${{ steps.userdata.outputs.type}}"
        with:
          script: |
            const { CONST_APIURL, INPUT_PACKAGE_NAME, INPUT_OWNER, INPUT_REPO, OUTPUT_TYPE } = process.env

            output = CONST_APIURL+""

            if (OUTPUT_TYPE == "User") {
              output = output+"/users/"+INPUT_OWNER+"/packages/container/"
            } else {
              output = output+"/orgs/"+INPUT_OWNER+"/packages/container/"
            }

            if (INPUT_REPO != "") {
              output = output+INPUT_REPO
            } else {
              output = output+INPUT_PACKAGE_NAME
            }

            output = output+"/versions"

            core.setOutput('url', output)
      - name: Print Version API
        run: echo "The generated API URL is ${{ steps.version-url.outputs.url }}"
      - name: Get Version ID from the Versions List
        id: version-id
        run: |
          curl \
            -X GET \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}" \
            "${{steps.version-url.outputs.url}}" >> ${HOME}/versionIds.json
          echo "version_id=$(jq -r ".[] | select(.metadata.container.tags | index(\"pr-${{ inputs.pull-request-number }}\")).id" ${HOME}/versionIds.json)" | tee -a "${GITHUB_OUTPUT}"
      - name: Print Version ID
        run: echo "The selected Version ID is ${{ steps.version-id.outputs.version_id }}"

  # this job will only run if the PR has been merged
  merge_job:
    name: "PR was closed and merged"
    if: ${{ inputs.pull-request-merged == true }}
    runs-on: ubuntu-latest
    needs:
      metadata
    steps:
      - uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ inputs.package-name }}
          package-type: 'container'
          min-versions-to-keep: 0
          delete-only-untagged-versions: 'true'
      - uses: actions/delete-package-versions@v5
        if: ${{ needs.metadata.outputs.version-id != '' }}
        with:
          package-name: ${{ inputs.package-name }}
          package-type: 'container'
          package-version-ids: '${{ needs.metadata.outputs.version-id }}'

  # this job will only run if the PR has been closed without being merged
  close_job:
    name: "PR was closed but not merged"
    if: ${{ inputs.pull-request-merged == false }}
    runs-on: ubuntu-latest
    needs:
      metadata
    steps:
      - uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ inputs.package-name }}
          package-type: 'container'
          min-versions-to-keep: 0
          delete-only-untagged-versions: 'true'
      - uses: actions/delete-package-versions@v5
        if: ${{ needs.metadata.outputs.version-id != '' }}
        with:
          package-name: ${{ inputs.package-name }}
          package-type: 'container'
          package-version-ids: '${{ needs.metadata.outputs.version-id }}'
